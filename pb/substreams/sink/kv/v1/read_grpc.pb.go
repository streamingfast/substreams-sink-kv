// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: substreams/sink/kv/v1/read.proto

package kvv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KvClient is the client API for Kv service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KvClient interface {
	// Get returns the requested value as bytes if it exists, not found error code otherwise.
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	// GetMany returns the requested values as bytes if all of them exists, not found error code otherwise.
	GetMany(ctx context.Context, in *GetManyRequest, opts ...grpc.CallOption) (*GetManyResponse, error)
	// GetByPrefix returns the next _limit_ key/value pair that match the requested prefix if any exist, not found error code otherwise.
	GetByPrefix(ctx context.Context, in *GetByPrefixRequest, opts ...grpc.CallOption) (*GetByPrefixResponse, error)
	// Scan returns then next _limit_ key/value pairs starting lexicographically at the given key, not found error code otherwise.
	Scan(ctx context.Context, in *ScanRequest, opts ...grpc.CallOption) (*ScanResponse, error)
}

type kvClient struct {
	cc grpc.ClientConnInterface
}

func NewKvClient(cc grpc.ClientConnInterface) KvClient {
	return &kvClient{cc}
}

func (c *kvClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/sf.substreams.sink.kv.v1.Kv/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kvClient) GetMany(ctx context.Context, in *GetManyRequest, opts ...grpc.CallOption) (*GetManyResponse, error) {
	out := new(GetManyResponse)
	err := c.cc.Invoke(ctx, "/sf.substreams.sink.kv.v1.Kv/GetMany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kvClient) GetByPrefix(ctx context.Context, in *GetByPrefixRequest, opts ...grpc.CallOption) (*GetByPrefixResponse, error) {
	out := new(GetByPrefixResponse)
	err := c.cc.Invoke(ctx, "/sf.substreams.sink.kv.v1.Kv/GetByPrefix", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kvClient) Scan(ctx context.Context, in *ScanRequest, opts ...grpc.CallOption) (*ScanResponse, error) {
	out := new(ScanResponse)
	err := c.cc.Invoke(ctx, "/sf.substreams.sink.kv.v1.Kv/Scan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KvServer is the server API for Kv service.
// All implementations should embed UnimplementedKvServer
// for forward compatibility
type KvServer interface {
	// Get returns the requested value as bytes if it exists, not found error code otherwise.
	Get(context.Context, *GetRequest) (*GetResponse, error)
	// GetMany returns the requested values as bytes if all of them exists, not found error code otherwise.
	GetMany(context.Context, *GetManyRequest) (*GetManyResponse, error)
	// GetByPrefix returns the next _limit_ key/value pair that match the requested prefix if any exist, not found error code otherwise.
	GetByPrefix(context.Context, *GetByPrefixRequest) (*GetByPrefixResponse, error)
	// Scan returns then next _limit_ key/value pairs starting lexicographically at the given key, not found error code otherwise.
	Scan(context.Context, *ScanRequest) (*ScanResponse, error)
}

// UnimplementedKvServer should be embedded to have forward compatible implementations.
type UnimplementedKvServer struct {
}

func (UnimplementedKvServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedKvServer) GetMany(context.Context, *GetManyRequest) (*GetManyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMany not implemented")
}
func (UnimplementedKvServer) GetByPrefix(context.Context, *GetByPrefixRequest) (*GetByPrefixResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByPrefix not implemented")
}
func (UnimplementedKvServer) Scan(context.Context, *ScanRequest) (*ScanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Scan not implemented")
}

// UnsafeKvServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KvServer will
// result in compilation errors.
type UnsafeKvServer interface {
	mustEmbedUnimplementedKvServer()
}

func RegisterKvServer(s grpc.ServiceRegistrar, srv KvServer) {
	s.RegisterService(&Kv_ServiceDesc, srv)
}

func _Kv_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KvServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sf.substreams.sink.kv.v1.Kv/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KvServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kv_GetMany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetManyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KvServer).GetMany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sf.substreams.sink.kv.v1.Kv/GetMany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KvServer).GetMany(ctx, req.(*GetManyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kv_GetByPrefix_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByPrefixRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KvServer).GetByPrefix(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sf.substreams.sink.kv.v1.Kv/GetByPrefix",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KvServer).GetByPrefix(ctx, req.(*GetByPrefixRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kv_Scan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KvServer).Scan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sf.substreams.sink.kv.v1.Kv/Scan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KvServer).Scan(ctx, req.(*ScanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Kv_ServiceDesc is the grpc.ServiceDesc for Kv service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Kv_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sf.substreams.sink.kv.v1.Kv",
	HandlerType: (*KvServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Kv_Get_Handler,
		},
		{
			MethodName: "GetMany",
			Handler:    _Kv_GetMany_Handler,
		},
		{
			MethodName: "GetByPrefix",
			Handler:    _Kv_GetByPrefix_Handler,
		},
		{
			MethodName: "Scan",
			Handler:    _Kv_Scan_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "substreams/sink/kv/v1/read.proto",
}
